#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define inf 1e9
#define INF 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii, null_type, less<ii>, rb_tree_tag, tree_order_statistics_node_update>//ii->multiset ,int->set
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/
//int i,j,k,c,b;
const int N   = 200005;
const int LIM=1000005;

vii adj[N];
int dist[N];

void dijkstra(int src,int n)
{
  set<ii>s;
  s.insert({0,src});

  for(int i=1;i<=n;i++)
  {
      dist[i]=1e18;
  }
  dist[src]=0;
  while(!s.empty())
  {
      ii u=*s.begin();
      int d=u.first;
      int indi=u.second;

      s.erase(s.begin());
      if(dist[indi]<d)
        continue;
      for(auto &v:adj[indi])
      {
          int w=v.second;
          int indf=v.first;
          if(dist[indf]>d+w)
          {
              dist[indf]=d+w;
              s.insert({dist[indf],indf});
          }
      }
  }
  for(int i=1;i<=n;i++)
  {
      cout<<dist[i]<<" ";
  }
}
void solve()
{
  int n,m;
  cin>>n>>m;
  int a,b,c;
  fo(i,0,m)
  {
      cin>>a>>b>>c;
      adj[a].pb({b,c});
  }
  dijkstra(1,n);
}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
