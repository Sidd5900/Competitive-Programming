#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii, null_type, less<ii>, rb_tree_tag, tree_order_statistics_node_update>//ii->multiset ,int->set
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/
//int i,j,k,c,b;
const int N   = 200005;
const int LIM=1000005;

int parent[N];
int siz[N];

struct edge{
    int u;
    int v;
    int w;
    edge(int uu,int vv,int ww)
    {
        u=uu;
        v=vv;
        w=ww;
    }
};


bool comp(struct edge &a,struct edge &b)
{
    return a.w<=b.w;
}


vector<struct edge> edges;

void make_set(int v) {
    parent[v] = v;
   //rnk[v] = 0;
   siz[v]=1;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (siz[a] < siz[b])
            swap(a, b);
        parent[b] = a;
     //   if (rnk[a] == rnk[b])
          //  rnk[a]++;
          siz[a]+=siz[b];
    }
}

int n,m;

void kruskal()
{
    int cost=0;
    int cnt=0;
    for(int i=1;i<=n;i++)
        make_set(i);
    sort(all(edges),comp);
    for(auto x:edges)
    {
        int a=x.u;
        int b=x.v;
        int wt=x.w;
        if(find_set(a)!=find_set(b))
        {
            cost+=wt;
            cnt++;
            union_sets(a,b);
        }
    }
    if(cnt==n-1)
    {
        cout<<cost<<endl;
    }
    else
        cout<<"IMPOSSIBLE"<<endl;

}

void solve()
{
    int u, v, w;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
    {
         cin >> u >> v >> w;
        edges.push_back(edge(u,v,w));
    }
    kruskal();

}




int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
