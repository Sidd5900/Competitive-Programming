#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1000005;
const int LIM=200005;



void solve()
{
    int n;
    cin>>n;
    vi v(n);
    fo(i,0,n)
    {
        cin>>v[i];
    }
    vi ans;
    for(auto x:v)
    {
        if(ans.empty() || x>ans.back())
        {
            ans.push_back(x);
        }
        else
        {
            auto it=lower_bound(ans.begin(),ans.end(),x);
            *it=x;
        }
    }
    cout<<ans.size()<<endl;

    /* O(n^2) dp approach
    int dp[n];
    int pre[n];
    memset(pre,-1,sizeof(pre));
    pre[0]=-1;
    for(int i=0;i<n;i++)
    {
        dp[i]=1;
        for(int j=0;j<i;j++)
        {
            if(v[i]>v[j])
            {
                //dp[i]=max(dp[i],dp[j]+1);
                if(dp[j]+1>dp[i])
                {
                    pre[i]=j;
                    dp[i]=dp[j]+1;
                }
            }
        }
    }
    int dpans=0;
    int maxidx=0;
    for(int i=0;i<n;i++)
    {
        if(dp[i]>dpans)
        {
            maxidx=i;
            dpans=dp[i];
        }
    }
    //print answer
    cout<<dpans<<endl;
    vi sequence;
    while(1)
    {
        sequence.push_back(v[maxidx]);
        maxidx=pre[maxidx];
        if(maxidx==-1)
            break;
    }
    //print the lis
    reverse(all(sequence));
    for(auto x:sequence)
        cout<<x<<" ";
    cout<<endl;*/

}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
