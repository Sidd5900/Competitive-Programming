#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N  = 200005;
const int LIM=200005;

int arr[LIM];
//int stree[4*LIM];
//int lazy[4*LIM];

struct node{
    int sum;
    int lazy;
    node(int s=0, int l=0)
    {
        sum=s;
        lazy=l;
    }
};

node stree[4*LIM];
//propagate to child indexs

node combine(node a, node b)
{
    return node(a.sum+b.sum, 0);
}

void push(int index,int start,int end)
{
    if(stree[index].lazy!=0)
    {
        stree[index].sum += stree[index].lazy*(end-start+1);
        if(start!=end)
        {
            stree[2*index].lazy += stree[index].lazy;
            stree[2*index+1].lazy += stree[index].lazy;
        }
        stree[index].lazy=0;
    }
}

void build(int index, int start, int end)
{
    if(start == end)
    {
        stree[index] = node(arr[start],0);
    }
    else
    {
        int mid = (start + end) / 2;
        build(2*index, start, mid);
        build(2*index+1, mid+1, end);
        stree[index] = combine(stree[2*index], stree[2*index+1]);
    }
}

//increase l to r by val
void rangeupdate(int index,int start, int end, int l, int r, int val)
{
    push(index, start, end);
    //outside range
    if(r<start || l>end || start>end)
        return;

    //current range completely inside l to r, update the current index
    if(l<=start && end<=r)
    {
        stree[index].lazy +=val;
        push(index, start, end);
        return;
    }

    //partial overlap
    int mid=(start+end)/2;
    rangeupdate(2*index,start,mid,l,r,val);
    rangeupdate(2*index+1,mid+1,end,l,r,val);
    stree[index]=combine(stree[2*index], stree[2*index+1]);
}

node querysumlazy(int index,int start,int end,int l,int r)
{
    push(index, start, end);
    if(r<start || l>end || start>end)
        return node();
    if(start>=l && end<=r)
    {
        return stree[index];
    }
    int mid=(start+end)/2;
    return combine(querysumlazy(2*index,start,mid,l,r), querysumlazy(2*index+1,mid+1,end,l,r));
}

void solve()
{
    int n,q;
    cin >> n >> q;
    for (int i = 0; i <n; i++)
        cin >> arr[i];
    build(1, 0, n-1);

    while(q--)
    {
        int p;
        cin>>p;
        if(p==1)
        {
            int a,b,u;
            cin>>a>>b>>u;
            a--;b--;
            rangeupdate(1,0,n-1,a,b,u);
        }
        else
        {
            int l,r;
            cin>>l>>r;
            l--;r--;
            node ans = querysumlazy(1,0,n-1,l,r);
            cout<<ans.sum<<endl;
        }
    }

}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
