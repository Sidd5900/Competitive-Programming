#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N   = 200005;
const int LIM=100005;

struct node
{
    int maxm;
    int freq;

    node(int m = -inf, int f = 0)
    {
        maxm=m;
        freq=f;
    }
};

int arr[LIM];
node stree[4*LIM];// max element and its frequency


node combine(node &a, node &b)
{
    int m1=a.maxm;
    int f1=a.freq;
    int m2=b.maxm;
    int f2=b.freq;

    if(m1>m2)
    return a;
    else if(m1<m2)
    {
        return b;
    }
    else
    {
        return node(m1, f1+f2);
    }
}


void build(int index, int start, int end)
{
    if(start == end)
    {
        // Leaf index will have a single element
        stree[index] = node(arr[start],1);
    }
    else
    {
        int mid = (start + end) / 2;
        // Recurse on the left child
        build(2*index, start, mid);
        // Recurse on the right child
        build(2*index+1, mid+1, end);
        // Internal index will have the sum of both of its children
        stree[index]=combine(stree[2*index],stree[2*index+1]);

    }
}

void update(int index, int start, int end, int pos, int val)
{
    if(pos<start || pos>end) return;
    if(start == end)
    {
        // Leaf index
        arr[pos] = val;
        stree[index] = node(val,1);
        return;
    }
    int mid = (start + end) / 2;
    update(2*index, start, mid, pos, val);
    update(2*index+1, mid+1, end, pos, val);
    stree[index]=combine(stree[2*index],stree[2*index+1]);
}

node query(int index, int start, int end, int l, int r)
{
    if(r < start || end < l)
    {
        // range represented by a index is completely outside the given range
        return node(-inf,0);
    }
    if(l <= start && end <= r)
    {
        // range represented by a index is completely inside the given range
        return stree[index];
    }
    // range represented by a index is partially inside and partially outside the given range
    int mid = (start + end) / 2;
    node p1 = query(2*index, start, mid, l, r);
    node p2 = query(2*index+1, mid+1, end, l, r);
    return combine(p1,p2);
}

void solve()
{
  int n,q;
  cin>>n>>q;
  fo(i,0,n)
  cin>>arr[i];
  build(1,0,n-1);
  int pos,val,l,r,x;
  fo(i,0,q)
  {
      cin>>x;
      if(x==1)//update
      {
          cin>>pos>>val;
          update(1,0,n-1,pos,val);
      }
      else  //give the result of the query
      {
          cin>>l>>r;//0 based indexing
          node ans=query(1,0,n-1,l,r);
          cout<<ans.maxm<<" "<<ans.freq<<endl;
      }
  }

}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
