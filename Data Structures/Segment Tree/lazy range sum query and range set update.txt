#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii, null_type, less<ii>, rb_tree_tag, tree_order_statistics_node_update>//ii->multiset ,int->set
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1000005;
const int LIM=200005;

int arr[LIM];
int stree[4*LIM];
int lazy2[4*LIM];
int marked[4*LIM];

//propagate to child nodes
void push(int node,int start,int end,int mid)
{
    if(marked[node])
    {
        marked[2*node]=1;
        marked[2*node+1]=1;
        stree[2*node]=lazy2[node]*(mid-start+1);
        stree[2*node+1]=lazy2[node]*(end-(mid+1)+1);
        lazy2[2*node]=lazy2[node];
        lazy2[2*node+1]=lazy2[node];
        marked[node]=0;
    }
}

void build(int node, int start, int end)
{
    if(start == end)
    {
        stree[node] = arr[start];
    }
    else
    {
        int mid = (start + end) / 2;
        build(2*node, start, mid);
        build(2*node+1, mid+1, end);
        stree[node] = stree[2*node] + stree[2*node+1];
    }
}



//increase l to r by val
void rangeupdateset(int node,int start, int end, int l, int r, int val)
{
    //outside range
    if(r<start || l>end || start>end)
        return;

    //current range completely inside l to r, update the current node
    if(start>=l && end<=r)
    {
        stree[node]=(end-start+1)*val;
        lazy2[node]=val;
        marked[node]=1;
        return;
    }

    //partial overlap
    int mid=(start+end)/2;

    //whenever descending down the node, propagate the lazy values to child nodes
    push(node,start,end,mid);
    rangeupdateset(2*node,start,mid,l,r,val);
    rangeupdateset(2*node+1,mid+1,end,l,r,val);
    stree[node]=stree[2*node]+stree[2*node+1];
}




int querysumlazy(int node,int start,int end,int l,int r)
{
    if(r<start || l>end || start>end)
        return 0;
    if(start>=l && end<=r)
        return stree[node];
    int mid=(start+end)/2;
    push(node,start,end,mid);
    return querysumlazy(2*node,start,mid,l,r)+querysumlazy(2*node+1,mid+1,end,l,r);
}

void solve()
{
    int n,q;
    cin >> n >> q;
    for (int i = 0; i <n; i++)
        cin >> arr[i];
    build(1, 0, n-1);
    while (q--)
    {
        int t, l, r;
        cin >> t >> l >> r;
        if (t == 3)
            cout << querysumlazy(1, 0, n-1, l-1, r-1)<< "\n";
        else if(t==2)
        {
             int x;
            cin >> x;
            rangeupdateset(1, 0, n-1, l-1, r-1, x);
        }
    }

}

int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
