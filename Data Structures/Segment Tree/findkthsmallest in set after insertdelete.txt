#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int n  = 200005;
const int LIM=100005;

int arr[LIM];
int stree[4*LIM];

int combine(int a,int b)
{
    return a+b;
}


void addtoset(int index, int start, int end, int num)
{
    if(start == end)
    {
        // Leaf index
        arr[num] = 1;
        stree[index] = 1;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= num and num <= mid)
        {
            // If idx is in the left child, recurse on the left child
            addtoset(2*index, start, mid, num);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            addtoset(2*index+1, mid+1, end, num);
        }
        // Internal index will have the sum of both of its children
        stree[index] = combine(stree[2*index],stree[2*index+1]);
    }

}


void removefromset(int index, int start, int end, int num)
{
    if(start == end)
    {
        // Leaf index
        arr[num] = 0;
        stree[index] = 0;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= num and num <= mid)
        {
            // If idx is in the left child, recurse on the left child
            removefromset(2*index, start, mid, num);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            removefromset(2*index+1, mid+1, end, num);
        }
        // Internal index will have the sum of both of its children
        stree[index] = combine(stree[2*index],stree[2*index+1]);
    }

}


int kthquery(int index, int start, int end, int k)
{
    if(start==end)
        return start;

    // range represented by a index is partially inside and partially outside the given range
    int mid = (start + end) / 2;
    if(stree[2*index] >= k)
    {
        return kthquery(2*index, start, mid, k);
    }
    return kthquery(2*index+1, mid+1, end, k-stree[2*index]);
}


void solve()
{
  int q;
  cin>>q;
  int c,x;
  fo(i,0,q)
  {
      cin>>c;
      if(c==1)
      {
          cin>>x;
          addtoset(1,0,n-1,x);
      }
      else if(c==2)
      {
          cin>>x;
          removefromset(1,0,n-1,x);
      }
      else
      {
          int k;
          cin>>k;
          cout<<kthquery(1,0,n-1,k)<<endl;
      }

  }

}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
