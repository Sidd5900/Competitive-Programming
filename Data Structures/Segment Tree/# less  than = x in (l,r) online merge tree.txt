#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/
//Query: l,r,x : find no. of elements <=X in [l,r]
const int N  = 200005;
const int LIM=200005;

int arr[LIM];
//int stree[4*LIM];
//int lazy[4*LIM];

struct Query{
    int l;
    int r;
    int x;
    int idx;
    Query(int lq=0,int rq=0, int xq=0, int i=0)
    {
        l=lq;
        r=rq;
        x=xq;
        idx=i;
    }
};

bool comp(Query &a, Query &b)
{
    return (a.x<b.x);
}
struct node{
    vi v;
};

node stree[4*LIM];
//propagate to child indexs

node combine(node a, node b)
{
    vi v1 = a.v;
    vi v2= b.v;
    vi curv;
    int n=v1.size();
    int m=v2.size();
    int i=0,j=0;
    while(i<n && j<m)
    {
        if(v1[i]<=v2[j])
        {
            curv.push_back(v1[i]);
            i++;
        }
        else
        {
            curv.push_back(v2[j]);
            j++;
        }
    }
    while(i<n)
    {
         curv.push_back(v1[i]);
            i++;
    }
    while(j<m)
    {
         curv.push_back(v2[j]);
            j++;
    }
    node ans;
    ans.v=curv;
    return ans;
}

void build(int index, int start, int end)
{
    if(start==end)
    {
        stree[index].v.push_back(arr[start]);
        return;
    }
    int mid=(start+end)/2;
    build(2*index, start, mid);
    build(2*index+1, mid+1, end);
    stree[index]=combine(stree[2*index], stree[2*index+1]);
}

int querysum(int index,int start,int end,int l,int r, int x)
{
    if(r<start || l>end || start>end)
        return 0;
    if(start>=l && end<=r)
    {
        int ans= upper_bound(stree[index].v.begin(), stree[index].v.end(), x) - stree[index].v.begin();
        return ans;
    }
    int mid=(start+end)/2;
    return querysum(2*index,start,mid,l,r,x) + querysum(2*index+1,mid+1,end,l,r,x);
}

void solve()
{
    int n,q;
    cin >> n >> q;
    for (int i = 0; i <n; i++)
    {
        cin >> arr[i];
    }
    build(1, 0, n-1);
    for(int i=0;i<q;i++)
    {
        int l,r,x;
        cin>>l>>r>>x;
        cout<<querysum(1,0,n-1, l,r,x)<<endl;

    }

}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
