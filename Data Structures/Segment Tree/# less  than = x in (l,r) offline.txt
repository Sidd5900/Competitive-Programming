#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/
//Query: l,r,x : find no. of elements <=X in [l,r]
const int N  = 200005;
const int LIM=200005;

int arr[LIM];
//int stree[4*LIM];
//int lazy[4*LIM];

struct Query{
    int l;
    int r;
    int x;
    int idx;
    Query(int lq=0,int rq=0, int xq=0, int i=0)
    {
        l=lq;
        r=rq;
        x=xq;
        idx=i;
    }
};

bool comp(Query &a, Query &b)
{
    return (a.x<b.x);
}
struct node{
    int sum;
    node(int s=0)
    {
        sum=s;
    }
};

node stree[4*LIM];
//propagate to child indexs

node combine(node a, node b)
{
    return node(a.sum+b.sum);
}

//increase l to r by val
void update(int index,int start, int end, int pos)
{
    //outside range
    if(pos<start || pos>end)
        return;

    //current range completely inside l to r, update the current index
    if(start ==end)
    {
        stree[index]=1;
        return;
    }

    //partial overlap
    int mid=(start+end)/2;
    update(2*index,start,mid,pos);
    update(2*index+1,mid+1,end,pos);
    stree[index]=combine(stree[2*index], stree[2*index+1]);
}

node querysum(int index,int start,int end,int l,int r)
{
    if(r<start || l>end || start>end)
        return node(0);
    if(start>=l && end<=r)
    {
        return stree[index];
    }
    int mid=(start+end)/2;
    return combine(querysum(2*index,start,mid,l,r), querysum(2*index+1,mid+1,end,l,r));
}

void solve()
{
    int n,q;
    cin >> n >> q;
    vii v(n);
    for (int i = 0; i <n; i++)
    {
        cin >> arr[i];
        v[i]={arr[i],i};
    }
    //build(1, 0, n-1);
    sort(all(v));
    vector<Query> query(q);
    for(int i=0;i<q;i++)
    {
        int l,r,x;
        cin>>l>>r>>x;
        query[i]= Query(l,r,x,i);
    }
    sort(all(query), comp);

    vi ans(q);
    int j=0;
    for(int i=0;i<q;i++)
    {
        int x=query[i].x;
        int l=query[i].l;
        int r=query[i].r;
        int idx=query[i].idx;
        while(j<n && v[j].first<=x)
        {
            update(1,0,n-1,v[j].second);
            j++;
        }
        node res=querysum(1,0,n-1, l,r);
        ans[idx]= res.sum;
    }
    for(int i=0;i<q;i++)
        cout<<ans[i]<<" ";

}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
