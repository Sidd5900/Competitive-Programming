#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/



const int N=1000005;
const int LIM=200005;

class Hasher{
    public:
    size_t operator()(ii x) const {
        return x.first ^ x.second;
    }
};

//set priority queue comparator----------------------------------------------------------------------------
struct mycomp{
bool operator()(const ii &a,const ii &b)
{
    if(a.first!=b.first)
    {
        return(a.first<b.first);
    }
    else
        return(a.second>b.second);
}
};
set<pair<int,int>,mycomp>st;//normal order
priority_queue<pair<int,int>,vector<pair<int,int>>,mycomp>q;//opp(first by desc, second by asc)

void solve()
{
    vi v={3,2,4,9,1,8,7,6,5,0};  //output-> 2 0 1 3 4 8 7 6 5 9
    /*//4 th element in the vector after the operation will contain the same value when array is sorted
    //its left will be less than it and right elements would be greater than it
    //O(n) avg,  nlogn in worst
    nth_element(v.begin(), v.begin()+3, v.end());
    for(auto x:v)
        cout<<x<<" ";

    string s = "bbbccccaadeee";
    int newlen= unique(s.begin(), s.end()) - s.begin();
    s[newlen] = 0;
    cout<<newlen<<" "<<s<<endl;*/
    /*sort(all(v));
    auto it = upper_bound(v.begin(),v.end(),4);
    cout<<it - v.begin()<<Endl;*/

   /* vi v2={1,2,3};
    //O(n) worst but amortized O(1)
    do{
        for(auto x:v2)
            cout<<x<<" ";
        cout<<Endl;
    }while(next_permutation(all(v2)));*/

    /*string zz="";
    for(int i=1;i<200005;i++)
    {
        zz.push_back('a');// or zz += 'a' both O(1)
        //but z = z + 'a' is O(n)
    }
    cout<<zz.size();*/

  /*  int n;
    cin>>n;
    string s;
    getline(cin, s);
    getline(cin, s);
    cout<<n<<" "<<s<<Endl;*/

   /* vi v1 = {1,2,3,4};
    vi v2 = {1,2,6,0};
    cout<<(v1<v2)<<endl;*/

   /* //doubly linked list
    list<int> l;
    for(int i=1;i<=5;i++)
        l.push_back(i);
    auto it = l.begin();// it= it+4 not possible
    it++;
    cout<< *it<<endl;
    it = l.erase(it);//O(1)
    l.insert(it,100);
    for(auto x: l)
        cout<<x<<" ";
    //O(nlogn)
    l.sort();// not sort(l.begin(), l.end()) as l.begin() returns bidirectional iterator instead of random iterator
    */

  /*  //O(!) random access and push and pop from both sides
    deque<int> dq;
    for(int i=1;i<=5;i++)
        dq.push_back(i);
    dq.push_front(0);
    dq.pop_back();
    cout<<dq[2]<<endl;*/

   /* //set has bidirectional iterator hence it = it+4 not allowed
    vi v1={1,2,3,4,5};
    set<int>st(v.begin(),v.end()); //O(n) since already sorted
    auto it =st.lower_bound(3);
    //it = it+2; error
    cout<<*it<<Endl;*/

    //hash functions exist for int, double, string, etc but not pair

   /* unordered_set<ii, Hasher>s;
    s.insert({1,2});*/

 





}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
