#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1000005;
const int LIM=200005;

/* codeforces problems: for ith problem
   initial score : si, time to solve: ti, penalty for each second: di
   all problems must be solved in some order to maximize score*/


/* use exchange arguments: used to proof greedy techniques: assume optimal, exchange arguments to derive relation
let i solved before j for optimal score
=> si - ti.di + sj - (ti+tj)dj >=  sj - tj.dj + si - (ti+tj)di
=>-ti.dj >= -tj.di
=>ti.dj<=tj.di*/

struct problem{
    int id;
    int s;
    int t;
    int d;
};

bool comp(problem &a, problem &b)
{
    return a.t*b.d < b.t*a.d;
}


void solve()
{
   int n,s,t,d;
   cin>>n;
   vector<problem> v(n);
   for(int i=0;i<n;i++)
   {
       cin>>s>>t>>d;
       v[i].id=i;
       v[i].s=s;
       v[i].t=t;
       v[i].d=d;
   }
   sort(v.begin(), v.end(), comp);
   for(auto p: v)
   {
       cout<<p.id<<" ";
   }
}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
