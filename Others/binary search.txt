#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1000005;
const int LIM=200005;

//minimize the maximum distance between two points on a number line using at most k points

int n,k;
int arr[N];

bool check(int mid)
{
    int used=0; //points used
    for(int i=1;i<n;i++)
    {
        int dist= arr[i]-arr[i-1];
        //ceil(dist/mid)-1
        used+= ((dist+mid-1)/mid-1);
    }
    return used<=k;

}
void solve()
{
   cin>>n>>k;
   fo(i,0,n)
   cin>>arr[i];
   sort(arr,arr+n);
   int lo=1;
   int hi=1e9;
   int ans=-1;
   while(lo<=hi)
   {
       int mid= lo+(hi-lo)/2;
       if(check(mid))
       {
           ans=mid;
           hi=mid-1;
       }
       else
       {
           lo=mid+1;
       }
   }
   cout<<ans<<Endl;
}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
