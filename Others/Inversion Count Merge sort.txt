#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1000005;
const int LIM=200005;

int ans;

int Merge(vi &v, int l,int m,int r)
{
    int i=l;
    int j=m+1;
    int k=0;
    int curans=0;
    vi comb(r-l+1);

    while(i<=m && j<=r)
    {
        if(v[i]<=v[j])
            comb[k++]=v[i++];
        else
        {
            curans+=m-i+1;
            comb[k++]=v[j++];
        }
    }

    while(i<=m)
        comb[k++]=v[i++];

    while(j<=r)
        comb[k++]=v[j++];

    for(int i=l;i<=r;i++)
        v[i]=comb[i-l];

    return curans;
}


int countInversion(vi &v, int l, int r)
{
    if(l==r)
        return 0;
    int m=(l+r)/2;
    int a1=countInversion(v,l,m);
    int a2=countInversion(v,m+1,r);
    int curans=Merge(v,l,m,r);
    return a1+a2+curans;
}

void solve()
{
   int n;
   cin>>n;
   vi v(n);
   fo(i,0,n)
   cin>>v[i];
   int ans=countInversion(v,0,n-1);
   cout<<ans<<Endl;
}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
