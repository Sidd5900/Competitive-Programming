#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define endl '\n'
#define Endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=1005;
const int LIM=200005;

//given n segments (li,ri) on a number line and an integer k
//find the length on the number line covered by k segments for all k from 1 to n

vector<pair<int,int>>v;

void solve()
{
   int n,l,r;
   cin>>n;
   for(int i=0;i<n;i++)
   {
       cin>>l>>r;
       v.push_back({l,1});
       v.push_back({r,-1});
   }
   sort(all(v));
   int cnt=0;
   int lencovered[n+1];
   memset(lencovered,0,sizeof(lencovered));// lencovered[k]=length covered by k segments
   for(int i=0;i<2*n;i++)//v.size()=2*n
   {
       int j=i;
       while(j<2*n && v[j].first == v[i].first)
       {
           cnt+=v[j].second;
           j++;
       }
       i=j-1;
       if(i+1<2*n)
       {
            int seglen= v[i+1].first-v[i].first;
            lencovered[cnt]+=seglen;
       }
   }
   for(int i=1;i<=n;i++)
   {
       cout<<lencovered[i]<<" ";
   }
}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;

  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
