#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/

const int N=5005;
const int LIM=1000005;

int m=1e9+5;
int ncr[5005][5005];

int fpow(int a, int b, int m)
{
      int ans = 1;
      a %= m;
      while(b)
      {
            if(b&1)
                ans = ans * a % m;
            a = a * a % m;
            b>>=1;
      }
      return ans;
}

//O(n^2) : used when m is not prime(inverse does not exists) otherwise use precomputed factorial and inverse
void pascalInit()
{
    for(int i=0;i<N;i++)
    {
       for(int j=0;j<=i;j++)
       {
           if(j==0 || j==i)
           {
               ncr[i][j]=1;
               continue;
           }
           ncr[i][j]=(ncr[i-1][j]+ncr[i-1][j-1])%m;
       }
    }
}

int fac[LIM];
int inv[LIM];

void create_fac(int n)
{
      //vector<int> fac(N),inv(N);
      fac[0] = inv[0] = 1;
      for(int i=1;i<=n;i++)
      {
            fac[i] = fac[i-1]*i % mod;
            inv[i] = fpow(fac[i],mod-2, mod);//inverse of i factorial wrt modulo m
      }
}

int NCR(int n,int r)
{
      //vector<int> fac(N),inv(N);
      return fac[n] * (inv[r] * inv[n-r] %mod ) % mod;
}


void solve()
{
   int n,k;
   cin>>n>>k;
   //Method 1:
   //pascalInit();
   //cout<<ncr[n][k]<<endl;

   //Method 2:
   //create_fac(LIM-1);
   //cout<<NCR(n,k);

   //Method 3:
   //multiplication method: used when n(10^18) is large and r is small(10^6)
   int ans=1;
   for(int i=0;i<=k-1;i++)
   {
       ans%=mod;
       //ans=ans*(n-i)/(i+1);
       ans=ans*((n-i)%mod)%mod * fpow(i+1, mod-2, mod)%mod;
   }
   cout<<ans<<endl;

}


int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
