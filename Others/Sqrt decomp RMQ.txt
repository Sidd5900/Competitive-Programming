#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e18
#define INF 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>//ii->multiset ,int->set
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
 
 
 
/***************************************************************************************************/
ll i,j,k;
const int LIM   = 200005;
const int N=1000005;
 
 
 
void solve()
{
    int n;
    cin>>n;
    vi a(n);
    for(int i=0;i<n;i++)
        cin>>a[i];
 
    int len=(int)sqrt((double)n)+1;//size of each block
    vi b(len);//store result of each block
    for(int i=0;i<len;i++)
        b[i]=inf;
    for(int i=0;i<n;i++)
    {
        b[i/len]=min(b[i/len],a[i]);
    }
 
    int q,l,r;
    cin>>q;
    fo(i,0,q)
    {
        cin>>l>>r;
        int ans=inf;
        int b_l=l/len;
        int b_r=r/len;
        if(b_l==b_r)
        {
            for(int i=l;i<=r;i++)
                ans=min(ans,a[i]);
        }
        else
        {
            for(int i=l;i<=len*(b_l+1)-1;i++)
                ans=min(ans,a[i]);
            for(int i=b_l+1;i<=b_r-1;i++)
                ans=min(ans,b[i]);
            for(int i=b_r*len;i<=r;i++)
                ans=min(ans,a[i]);
        }
        cout<<ans<<endl;
    }
}
int32_t main()
{
 //fastio
     // For getting input from input.txt file
  //  freopen("input.txt", "r", stdin);
 
    // Printing the Output to output.txt file
  //  freopen("output.txt", "w", stdout);
  int t=1;
 //cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
   solve();
  }
 return 0;
}
 