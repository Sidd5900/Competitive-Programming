#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl endl
#define pb push_back
#define mp make_pair
#define inf 1e18
#define INF 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>//ii->multiset ,int->set
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
 
 
 
/***************************************************************************************************/
ll i,j,k;
const int LIM   = 1000005;
const int N=200005;
 
//O(N+Q)*block where block=sqrt(N)

int block;

struct Query{
    int idx;
    int l;
    int r;
};
 
bool comp(Query &x, Query &y)
{
     if (x.l/block != y.l/block)
        return x.l/block < y.l/block;
 
    // Same block, sort by R value
    //return x.r > y.r;
    return (x.l / block & 1) ? (x.r < y.r) : (x.r > y.r);
}
 
void solve()
{
    int n;
    cin>>n;
    block=(int)sqrtl(n);
    vi v(n+1);
    fo(i,1,n+1)
    cin>>v[i];
    int queries;
    cin>>queries;
    int l,r;
   
   vector<Query>q(queries);
 
    fo(i,0,queries)
    {
        cin>>l>>r;
        q[i].idx=i;
        q[i].l=l;
        q[i].r=r;
    }
    sort(all(q),comp);
 
    int currL = 0, currR = -1;
    
    unordered_map<int,int>mp;
    vi ans(queries);
    fo(i,0,queries)
    {
         // L and R values of current range
        int L = q[i].l, R = q[i].r;
 
         while (currL > L) {
            currL--;
            //add(cur_l);
            mp[v[currL]]++;
        }
        while (currR < R) {
            currR++;
           // add(cur_r);
            mp[v[currR]]++;
        }
        while (currL < L) {
           // remove(cur_l);
           mp[v[currL]]--;
            if(mp[v[currL]]==0)
                mp.erase(v[currL]);
            currL++;
        }
        while (currR > R) {
            //remove(cur_r);
            mp[v[currR]]--;
            if(mp[v[currR]]==0)
                mp.erase(v[currR]);
            currR--;
        }
       int idx=q[i].idx;
       ans[idx]=mp.size();
    }
    fo(i,0,queries)
    cout<<ans[i]<<endl;
 
}
int32_t main()
{
 fastio
 
// For getting input from input.txt file
//freopen("input.txt", "r", stdin);
// Printing the Output to output.txt file
//freopen("output.txt", "w", stdout);
 
  int t=1;
 // cin>>t;
  for(int i=1;i<=t;i++)
  {
    //cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}