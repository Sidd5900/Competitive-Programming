#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
#define ll int
#define vi vector<int>
#define vvi vector<vector<int>>
#define fo(i,a,b) for(int i=a;i<b;i++)
#define all(x) x.begin(),x.end()
#define trav(x) for(auto it=x.begin();it!=x.end();it++)
#define mod 1000000007
#define Endl '\n'
#define endl '\n'
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define inf 1e9
#define linf 1e18
#define ld long double
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
#define watch(x) cout << (#x) << " is " << (x) << endl
#define debug(a) cerr << #a << ": " << a << endl
#define ordered_set tree<ii safeseq.push_back(i);
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define minheap priority_queue<int,vector<int>,greater<int>>
//#define minheap priority_queue<ii,vector<ii>,greater<ii>> //for min heap of pair
//order_of_key (k) : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero)


/***************************************************************************************************/
//Query: l,r,x : find no. of elements <=X in [l,r]
const int N  = 200005;
const int LIM=200005;

int maxm = 0;
int LN=5;
vi v;
int n;

struct node{
    node* child[2];
    int cnt;
    node(){
        child[0]=NULL;
        child[1]=NULL;
        cnt=0;
    }
};

void insrt(int num, node* root)
{
    node*cur=root;
    for(int i=LN-1;i>=0;i--)
    {
        cur->cnt++;
        int x = (num&(1<<i))?1:0;
            if(cur->child[x]==NULL)
            {
                node* temp=new node;
                cur->child[x]=temp;
            }
            cur=cur->child[x];
    }
    cur->cnt++;
}

void findmaxxor(node *root)
{
   insrt(v[0], root);
   for(int i=1;i<n;i++)
   {
       node* cur=root;
       int curmax=0;
       for(int j=LN-1;j>=0;j--)
       {
           int x = (v[i]&(1<<j))?1:0;
           if(cur->child[1-x]!=NULL)
           {
               curmax^= (1<<j);
               cur=cur->child[1-x];
           }
           else if(cur->child[x]==NULL)
           {
               cout<<"bye";
               return;
           }
           else
           {
               cur=cur->child[x];
           }
       }
       insrt(v[i], root);
       maxm=max(maxm, curmax);
   }

}

// find max v[i]^v[j] where i!=j
void solve()
{
   cin>>n;
   v.resize(n);
   for(int i=0;i<n;i++)
    cin>>v[i];

   node* root = new node;
   findmaxxor(root);
   cout<<maxm<<endl;
}
int32_t main()
{
 fastio
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
  int t=1;
  //cin>>t;
  for(int i=1;i<=t;i++)
  {
   // cout<<"Case #"<<i<<": ";
    solve();
  }
 return 0;
}
